name: Deploy Pipeline

on:
  push:
    branches:
      - main        # Deploy to production
      - staging     # Deploy to staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and test
  build:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Build application
        run: npm run build:${{ needs.setup.outputs.environment }}
        env:
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          VITE_COMMIT_SHA: ${{ github.sha }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: dist/
          retention-days: 30

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security audit
        run: |
          npm audit --audit-level=high
          npm run security:audit

  # Build Docker image
  docker:
    runs-on: ubuntu-latest
    needs: [setup, build, security]
    if: needs.setup.outputs.should_deploy == 'true'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.setup.outputs.environment }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=${{ needs.setup.outputs.environment }}
            VITE_APP_VERSION=${{ github.sha }}
            VITE_BUILD_TIME=${{ github.event.head_commit.timestamp }}
            VITE_COMMIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [setup, docker]
    if: needs.setup.outputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment tools
        run: |
          # Install deployment dependencies
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure staging environment
        run: |
          echo "Configuring staging deployment..."
          # Set up staging-specific configurations
          export STAGING_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging"
          echo "STAGING_IMAGE=$STAGING_IMAGE" >> $GITHUB_ENV

      - name: Deploy to staging infrastructure
        run: |
          echo "Deploying to staging environment..."

          # Deploy using Docker Compose
          echo "Pulling latest images..."
          docker-compose -f docker-compose.staging.yml pull

          echo "Starting staging deployment..."
          docker-compose -f docker-compose.staging.yml up -d

          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 60
        env:
          POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.STAGING_REDIS_PASSWORD }}

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          docker-compose -f docker-compose.staging.yml exec -T app npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."

          # Health check
          curl -f https://staging.clinicboost.com/health || exit 1

          # API health check
          curl -f https://staging-api.clinicboost.com/api/health || exit 1

          # Run automated smoke tests
          npm run test:smoke:staging
        continue-on-error: false

      - name: Performance baseline check
        run: |
          echo "Running performance baseline check..."
          npm run test:performance:staging
        continue-on-error: true

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            ✅ Staging deployment completed successfully
            - Environment: staging
            - Image: ${{ env.STAGING_IMAGE }}
            - Commit: ${{ github.sha }}
            - URL: https://staging.clinicboost.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ Staging deployment failed
            - Environment: staging
            - Commit: ${{ github.sha }}
            - Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [setup, docker]
    if: needs.setup.outputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment tools
        run: |
          # Install deployment dependencies
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create pre-deployment backup
        run: |
          echo "Creating pre-deployment backup..."
          # Trigger database backup
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/database.yml/dispatches" \
            -d '{"ref":"main","inputs":{"operation":"backup","environment":"production"}}'

          # Wait for backup to complete
          sleep 120

      - name: Configure production environment
        run: |
          echo "Configuring production deployment..."
          export PRODUCTION_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
          echo "PRODUCTION_IMAGE=$PRODUCTION_IMAGE" >> $GITHUB_ENV

      - name: Blue-Green deployment preparation
        run: |
          echo "Preparing blue-green deployment..."

          # Check current deployment color
          CURRENT_COLOR=$(curl -s https://app.clinicboost.com/api/deployment-info | jq -r '.color' || echo "blue")
          NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")

          echo "Current deployment: $CURRENT_COLOR"
          echo "New deployment: $NEW_COLOR"
          echo "NEW_COLOR=$NEW_COLOR" >> $GITHUB_ENV
          echo "CURRENT_COLOR=$CURRENT_COLOR" >> $GITHUB_ENV

      - name: Deploy to production (Blue-Green)
        run: |
          echo "Deploying to production environment (Blue-Green)..."

          # Deploy new version to inactive color
          echo "Deploying to $NEW_COLOR environment..."

          # Update docker-compose with new color
          sed "s/app:/app-$NEW_COLOR:/g" docker-compose.production.yml > docker-compose.production.$NEW_COLOR.yml

          # Deploy new version
          docker-compose -f docker-compose.production.$NEW_COLOR.yml up -d

          # Wait for new deployment to be ready
          echo "Waiting for new deployment to be ready..."
          sleep 120
        env:
          POSTGRES_PASSWORD: ${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.PRODUCTION_REDIS_PASSWORD }}

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          docker-compose -f docker-compose.production.$NEW_COLOR.yml exec -T app-$NEW_COLOR npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Health checks on new deployment
        run: |
          echo "Running health checks on new deployment..."

          # Internal health check (before switching traffic)
          NEW_PORT=$([ "$NEW_COLOR" = "blue" ] && echo "3001" || echo "3002")

          # Health check
          curl -f http://localhost:$NEW_PORT/health || exit 1

          # API health check
          curl -f http://localhost:$NEW_PORT/api/health || exit 1

          echo "Health checks passed for new deployment"

      - name: Switch traffic to new deployment
        run: |
          echo "Switching traffic to new deployment..."

          # Update load balancer configuration
          # This would typically involve updating nginx config or cloud load balancer

          # For Docker Compose, we'll update the main service
          docker-compose -f docker-compose.production.yml stop app
          docker-compose -f docker-compose.production.$NEW_COLOR.yml up -d

          # Update service discovery
          echo "Traffic switched to $NEW_COLOR deployment"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."

          # Wait for traffic switch to complete
          sleep 30

          # Verify public endpoints
          curl -f https://app.clinicboost.com/health || exit 1
          curl -f https://api.clinicboost.com/api/health || exit 1

          # Run critical path tests
          npm run test:critical-path:production
        continue-on-error: false

      - name: Performance monitoring setup
        run: |
          echo "Setting up performance monitoring..."

          # Trigger performance monitoring
          curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment_completed",
              "environment": "production",
              "version": "${{ github.sha }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

      - name: Cleanup old deployment
        run: |
          echo "Cleaning up old deployment..."

          # Stop old deployment after successful verification
          docker-compose -f docker-compose.production.$CURRENT_COLOR.yml down

          # Clean up old images (keep last 3 versions)
          docker image prune -f

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 Production deployment completed successfully
            - Environment: production
            - Image: ${{ env.PRODUCTION_IMAGE }}
            - Commit: ${{ github.sha }}
            - Deployment Color: ${{ env.NEW_COLOR }}
            - URL: https://app.clinicboost.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."

          # Switch back to previous deployment
          docker-compose -f docker-compose.production.$CURRENT_COLOR.yml up -d

          # Stop failed deployment
          docker-compose -f docker-compose.production.$NEW_COLOR.yml down

          echo "Rollback completed"

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            🚨 Production deployment failed and rolled back
            - Environment: production
            - Commit: ${{ github.sha }}
            - Rollback to: ${{ env.CURRENT_COLOR }}
            - Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  monitor:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Health check
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "staging" ]]; then
            curl -f https://staging.clinicboost.com/health || exit 1
          elif [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            curl -f https://app.clinicboost.com/health || exit 1
          fi

      - name: Performance monitoring
        run: |
          echo "Setting up performance monitoring..."
          # Add performance monitoring setup

      - name: Update deployment status
        run: |
          echo "Deployment completed successfully"
